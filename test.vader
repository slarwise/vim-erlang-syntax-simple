Execute:
  set filetype=erlang

  let highlight_group_to_matches = {
    \ 'erlangComment': ['% A comment'],
    \ 'erlangKeyword': ['after'],
    \ 'erlangOperator': ['==', 'div'],
    \ 'erlangBracket': ['{'],
    \ 'erlangPipe': ['|'],
    \ 'erlangArrow': ['->'],
    \ 'erlangVariable': ['MyVar', '_MyVar', '_'],
    \ 'erlangMacro': ['?PI', '?pi'],
    \ 'erlangRecord': ['#my_record'],
    \ 'erlangModulePrefix': ['my_module:'],
    \ 'erlangFunctionOrType': ['my_function()'],
    \ 'erlangFunctionRef': ['funcref/1'],
    \ 'erlangString': ['"A string"'],
    \ 'erlangAtom': ['atom'],
    \ 'erlangQuotedAtom': ["'AnAtom'", "'an-Atom\n3withOther_Stuffin?it'"],
    \ 'erlangNumber': ['0'],
    \ 'erlangPreProcInclude': ['-include', '-include_lib', '-import'],
    \ 'erlangPreProcExport': ['-export', '-export_type'],
    \ 'erlangPreProcMacro': ['-define', '-ifdef', '-ifndef', '-else', '-endif', '-if', '-elif'],
    \ 'erlangPreProcError': ['-error', '-warning'],
    \ 'erlangPreProcRecord': ['-record'],
    \ 'erlangTypedef': ['-type', '-opaque', '-spec'],
    \ 'erlangModuleAttribute': ['-module', '-compile', '-vsn', '-on_load', '-author', '-behaviour', '-behaviour_info', '-callback', '-file']
  \ }

  for [group, matches] in items(highlight_group_to_matches)
    for match in matches
      call setline(1, match)
      AssertEqual SyntaxAt(), group
    endfor
  endfor
